import React, { useState, useEffect } from "react";
import { Heart, MessageCircle, BadgeAlert, CircleX } from 'lucide-react';
import Avatar from './avatar';
import ModalFile from './ModalFile';
import axios from 'axios';  // Ajouter axios pour la gestion des requêtes API

type File = {
  id: number;
  url_fichier: string;
};

type Etudiant = {
  id: number;
  username: string;
  role: string;
  avatar_url: string | null;
};

type Commentaire = {
  id: number;
  texte: string;
  date_commentaire: string;
  etudiant: Etudiant;
  reponses?: Commentaire[]; // Réponses aux commentaires
};

type Publication = {
  id: number;
  legende: string;
  date_publication: string;
  etudiant: Etudiant;
  fichiers: File[];
};

interface PublicationListProps {
  publications: Publication[];
  loading: boolean;
  error: string | null;
}

const PublicationList: React.FC<PublicationListProps> = ({ publications, loading, error }) => {
  const [isFileModalOpen, setIsFileModalOpen] = useState(false);
  const [selectedFileUrl, setSelectedFileUrl] = useState<string | null>(null);
  const [likedPublications, setLikedPublications] = useState<number[]>([]); // Ajouté pour les likes
  const [commentaires, setCommentaires] = useState<{ [key: number]: Commentaire[] }>({}); // Stocker les commentaires pour chaque publication

  const openFileModal = (fileUrl: string) => {
    setSelectedFileUrl(fileUrl);
    setIsFileModalOpen(true);
  };

  const closeFileModal = () => {
    setIsFileModalOpen(false);
    setSelectedFileUrl(null);
  };

  // Fetch reactions (aime)
  useEffect(() => {
    const fetchUserReactions = async () => {
      try {
        const token = localStorage.getItem('token');
        const response = await axios.get('http://localhost:4000/reaction', {
          headers: { Authorization: `Bearer ${token}` },
        });
        const userLikedPublications = response.data.map((reaction: any) => reaction.publication_id);
        setLikedPublications(userLikedPublications);
      } catch (error) {
        console.error('Erreur lors du chargement des réactions:', error);
      }
    };

    fetchUserReactions();
  }, []);

  // Fetch commentaires pour chaque publication
  const fetchCommentaires = async (publicationId: number) => {
    try {
      const response = await axios.get(`http://localhost:4000/commentaire/${publicationId}`);
      setCommentaires((prev) => ({
        ...prev,
        [publicationId]: response.data,
      }));
    } catch (error) {
      console.error('Erreur lors du chargement des commentaires:', error);
    }
  };

  useEffect(() => {
    publications.forEach((publication) => {
      fetchCommentaires(publication.id);
    });
  }, [publications]);

  // Fonction pour gérer le like/délike
  const handleLikeToggle = async (publicationId: number) => {
    try {
      const isLiked = likedPublications.includes(publicationId);
      const token = localStorage.getItem('token');
      await axios.post(
        'http://localhost:4000/reaction',
        { publicationId },
        { headers: { Authorization: `Bearer ${token}` } }
      );

      setLikedPublications((prevLikedPublications) =>
        isLiked
          ? prevLikedPublications.filter((id) => id !== publicationId)
          : [...prevLikedPublications, publicationId]
      );
    } catch (error) {
      console.error('Erreur lors de la gestion de la réaction:', error);
    }
  };

  const sortedPublications = publications.sort(
    (a, b) => new Date(b.date_publication).getTime() - new Date(a.date_publication).getTime()
  );

  return (
    <div className="publication-list mt-8 ">
      {loading ? (
        <p>Chargement des publications...</p>
      ) : error ? (
        <p>{error}</p>
      ) : (
        sortedPublications.map((publication) => {
          const isLiked = likedPublications.includes(publication.id); // Vérifier si l'utilisateur a déjà aimé

          return (
            <div key={publication.id} className="bg-white p-4 rounded-md shadow mb-4 p-3">
              <div className="flex justify-between items-center mb-4">
                <div className="flex">
                  <Avatar />
                  <div className="ml-4">
                    <h4 className="text-lg font-bold">{publication.etudiant.username}</h4>
                    <p className="text-sm text-gray-400">{publication.etudiant.role}</p>
                    <span className="text-sm text-gray-400">
                      {new Date(publication.date_publication).toLocaleDateString()}
                    </span>
                  </div>
                </div>
                <button className="text-gray-500 hover:text-gray-700 ml-40">
                  <CircleX />
                </button>
              </div>

              <p className="mt-2 mb-4">{publication.legende}</p>

              {/* Gestion des fichiers */}
              <div className={`grid ${publication.fichiers.length === 1 ? 'grid-cols-1 justify-items-center' : ''}`}>
                {publication.fichiers.length === 1 && (
                  <div className="flex justify-center">
                    <img
                      src={publication.fichiers[0].url_fichier}
                      alt="Fichier unique"
                      className="w-full max-w-lg h-auto object-cover rounded-2xl cursor-pointer p-0.5"
                      onClick={() => openFileModal(publication.fichiers[0].url_fichier)}
                    />
                  </div>
                )}

                {publication.fichiers.length === 2 && (
                  <div className="grid grid-cols-2 gap-2">
                    {publication.fichiers.map((file, index) => (
                      <img
                        key={index}
                        src={file.url_fichier}
                        alt={`Fichier supplémentaire ${index + 1}`}
                        className="w-full h-80 object-cover rounded-2xl cursor-pointer p-0.5"
                        onClick={() => openFileModal(file.url_fichier)}
                      />
                    ))}
                  </div>
                )}

                {publication.fichiers.length === 3 && (
                  <div className="grid grid-cols-2 gap-2">
                    <div className="col-span-1">
                      <img
                        src={publication.fichiers[0].url_fichier}
                        alt="Premier fichier"
                        className="w-full h-80 object-cover rounded-2xl cursor-pointer p-0.5"
                        onClick={() => openFileModal(publication.fichiers[0].url_fichier)}
                      />
                    </div>
                    <div className="grid grid-rows-2 gap-2">
                      <img
                        src={publication.fichiers[1].url_fichier}
                        alt="Deuxième fichier"
                        className="w-full h-40 object-cover rounded-2xl cursor-pointer p-0.5"
                        onClick={() => openFileModal(publication.fichiers[1].url_fichier)}
                      />
                      <img
                        src={publication.fichiers[2].url_fichier}
                        alt="Troisième fichier"
                        className="w-full h-40 object-cover rounded-2xl cursor-pointer p-0.5"
                        onClick={() => openFileModal(publication.fichiers[2].url_fichier)}
                      />
                    </div>
                  </div>
                )}

                {publication.fichiers.length > 3 && (
                  <div className="grid grid-cols-2 gap-2">
                    <div className="col-span-1">
                      <img
                        src={publication.fichiers[0].url_fichier}
                        alt="Premier fichier"
                        className="w-full h-80 object-cover rounded-2xl cursor-pointer p-0.5"
                        onClick={() => openFileModal(publication.fichiers[0].url_fichier)}
                      />
                    </div>
                    <div className="grid grid-rows-2 gap-2">
                      <img
                        src={publication.fichiers[1].url_fichier}
                        alt="Deuxième fichier"
                        className="w-full h-40 object-cover rounded-2xl cursor-pointer p-0.5"
                        onClick={() => openFileModal(publication.fichiers[1].url_fichier)}
                      />
                      <div
                        className="relative w-full h-40 object-cover rounded-2xl cursor-pointer p-0.5 bg-gray-200 flex items-center justify-center"
                        onClick={() => openFileModal(publication.fichiers[3].url_fichier)}
                      >
                        <img
                          src={publication.fichiers[2].url_fichier}
                          alt="Troisième fichier"
                          className="absolute top-0 left-0 w-full h-full object-cover rounded-2xl opacity-50"
                        />
                        {publication.fichiers.length > 4 && (
                          <div className="absolute text-4xl text-white font-bold">
                            +{publication.fichiers.length - 3}
                          </div>
                        )}
                      </div>
                    </div>
                  </div>
                )}
              </div>

              <div className="flex justify-between items-center mt-4">
                <button
                  onClick={() => handleLikeToggle(publication.id)}
                  className={`flex items-center space-x-2 ${isLiked ? 'text-red-500' : 'text-gray-500'}`}
                >
                  <Heart className={`w-5 h-5 ${isLiked ? 'fill-current' : ''}`} />
                  <span>{isLiked ? 'Je n’aime plus' : 'J’aime'}</span>
                </button>
                <button className="flex items-center space-x-2 text-gray-500">
                  <MessageCircle />
                  <span>Commenter</span>
                </button>
              </div>

              {/* Affichage des commentaires */}
              {commentaires[publication.id] && commentaires[publication.id].length > 0 && (
                <div className="mt-4">
                  {commentaires[publication.id].map((commentaire: Commentaire) => (
                    <div key={commentaire.id} className="mb-4">
                      <div className="flex items-center space-x-2">
                        <Avatar />
                        <div>
                          <h6 className="text-sm font-bold">{commentaire.etudiant.username}</h6>
                          <p className="text-xs text-gray-400">
                            {new Date(commentaire.date_commentaire).toLocaleDateString()}
                          </p>
                          <p className="text-sm">{commentaire.texte}</p>
                        </div>
                      </div>

                      {/* Gestion des réponses */}
                      {commentaire.reponses?.length > 0 && (
                        <div className="ml-6 mt-2">
                          {commentaire.reponses.map((reponse: Commentaire) => (
                            <div key={reponse.id} className="mb-2 flex items-center space-x-2">
                              <Avatar />
                              <div>
                                <h6 className="text-xs font-bold">{reponse.etudiant.username}</h6>
                                <p className="text-xs text-gray-400">
                                  {new Date(reponse.date_commentaire).toLocaleDateString()}
                                </p>
                                <p className="text-xs">{reponse.texte}</p>
                              </div>
                            </div>
                          ))}
                        </div>
                      )}
                    </div>
                  ))}
                </div>
              )}
            </div>
          );
        })
      )}

      {isFileModalOpen && selectedFileUrl && (
        <ModalFile isOpen={isFileModalOpen} closeModal={closeFileModal} fileUrl={selectedFileUrl} />
      )}
    </div>
  );
};

export default PublicationList;
