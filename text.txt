import React, { useState, useEffect } from 'react';
import { Heart, MessageCircle, BadgeAlert, SendHorizonal, CircleX } from 'lucide-react';
import Avatar from './avatar';
import ModalFile from './ModalFile';
import axios from 'axios';  // Pour gérer les requêtes API

type File = {
  id: number;
  url_fichier: string;
};

type Etudiant = {
  id: number;
  username: string;
  role: string;
  avatar_url: string | null;
};

type Publication = {
  id: number;
  legende: string;
  date_publication: string;
  etudiant: Etudiant;
  fichiers: File[];
};

interface PublicationListProps {
  publications: Publication[];
  loading: boolean;
  error: string | null;
}

const PublicationList: React.FC<PublicationListProps> = ({ publications, loading, error }) => {
  const [isFileModalOpen, setIsFileModalOpen] = useState(false);
  const [selectedFileUrl, setSelectedFileUrl] = useState<string | null>(null);
  const [likedPublications, setLikedPublications] = useState<number[]>([]); // Ajouté pour les likes

  // Fonction pour ouvrir le modal avec un fichier
  const openFileModal = (fileUrl: string) => {
    setSelectedFileUrl(fileUrl);
    setIsFileModalOpen(true);
  };

  // Fonction pour fermer le modal
  const closeFileModal = () => {
    setIsFileModalOpen(false);
    setSelectedFileUrl(null);
  };

  // Charger les réactions de l'utilisateur au chargement du composant
  useEffect(() => {
    const fetchUserReactions = async () => {
      try {
        const token = localStorage.getItem('token');
        const response = await axios.get('http://localhost:4000/reactions', {
          headers: { Authorization: `Bearer ${token}` },
        });

        const userLikedPublications = response.data.map((reaction: any) => reaction.publication_id);
        setLikedPublications(userLikedPublications);
      } catch (error) {
        console.error('Erreur lors du chargement des réactions:', error);
      }
    };

    fetchUserReactions();
  }, []);

  // Fonction pour gérer le like/délike
  const handleLikeToggle = async (publicationId: number) => {
    try {
      const isLiked = likedPublications.includes(publicationId);
      const token = localStorage.getItem('token');

      // Envoyer la requête pour ajouter ou retirer la réaction
      const response = await axios.post(
        'http://localhost:4000/reaction',
        { publicationId },
        { headers: { Authorization: `Bearer ${token}` } }
      );

      // Mettre à jour l'état pour ajouter ou retirer le like
      setLikedPublications((prevLikedPublications) =>
        isLiked
          ? prevLikedPublications.filter((id) => id !== publicationId) // Retirer si déjà liké
          : [...prevLikedPublications, publicationId] // Ajouter si pas encore liké
      );
    } catch (error) {
      console.error('Erreur lors de la gestion de la réaction:', error);
    }
  };

  // Trier les publications par date (les plus récentes en premier)
  const sortedPublications = publications.sort(
    (a, b) => new Date(b.date_publication).getTime() - new Date(a.date_publication).getTime()
  );

  return (
    <div className="publication-list mt-8">
      {loading ? (
        <p>Chargement des publications...</p>
      ) : error ? (
        <p>{error}</p>
      ) : (
        sortedPublications.map((publication) => {
          const isLiked = likedPublications.includes(publication.id); // Vérifier si l'utilisateur a déjà aimé

          return (
            <div key={publication.id} className="bg-white p-4 rounded-md shadow mb-4">
              <div className="flex justify-between items-center mb-4">
                <div className="flex">
                  <Avatar />
                  <div className="ml-4">
                    <h4 className="text-lg font-bold">{publication.etudiant.username}</h4>
                    <p className="text-sm text-gray-400">{publication.etudiant.role}</p>
                    <span className="text-sm text-gray-400">
                      {new Date(publication.date_publication).toLocaleDateString()}
                    </span>
                  </div>
                </div>
                <button className="text-gray-500 hover:text-gray-700 ml-40">
                  <CircleX />
                </button>
              </div>

              <p className="mt-2 mb-4">{publication.legende}</p>

              {/* Gestion des fichiers */}
              <div className={`grid ${publication.fichiers.length === 1 ? 'grid-cols-1 justify-items-center' : ''}`}>
                {publication.fichiers.length === 1 && (
                  <div className="flex justify-center">
                    <img
                      src={publication.fichiers[0].url_fichier}
                      alt="Fichier unique"
                      className="w-full max-w-lg h-auto object-cover rounded-2xl cursor-pointer p-0.5"
                      onClick={() => openFileModal(publication.fichiers[0].url_fichier)}
                    />
                  </div>
                )}

                {/* Autres cas de gestion des fichiers */}
                {/* ... (logique déjà présente dans ton code) */}
              </div>

              <div className="flex justify-between mt-6">
                {/* Bouton J'aime avec changement de couleur */}
                <button
                  className="flex items-center space-x-2"
                  onClick={() => handleLikeToggle(publication.id)} // Appeler la fonction de like
                >
                  <Heart
                    className={`w-6 h-6 cursor-pointer transition duration-200 ease-in-out ${
                      isLiked ? 'text-red-500 fill-red-500' : 'text-gray-500'
                    } hover:text-red-500 hover:fill-red-500`} // Changer la couleur si aimé
                  />
                  <span className={`text-sm transition duration-200 ease-in-out ${isLiked ? 'text-red-500' : 'text-gray-500'}`}>
                    J'adore
                  </span>
                </button>

                <button className="flex items-center space-x-2 mx-auto">
                  <MessageCircle className="w-6 h-6 text-gray-500 hover:text-blue-500 cursor-pointer" />
                  <span className="text-sm text-gray-500">Commenter</span>
                </button>

                <button className="flex items-center space-x-2">
                  <BadgeAlert className="w-6 h-6 text-gray-500 hover:text-yellow-500 cursor-pointer" />
                  <span className="text-sm text-gray-500">Signaler</span>
                </button>
              </div>

              <div className="flex mt-10">
                <input
                  type="text"
                  placeholder="Commentaires..."
                  className="w-full p-2 border rounded-full hover:outline-none focus:ring-2 focus:ring-blue-500 "
                />
                <SendHorizonal className="w-10 h-10 text-gray-500 hover:text-blue-500 cursor-pointer ml-5" />
              </div>
            </div>
          );
        })
      )}

      {selectedFileUrl && (
        <ModalFile isOpen={isFileModalOpen} onClose={closeFileModal} fileUrl={selectedFileUrl} />
      )}
    </div>
  );
};

export default PublicationList;
