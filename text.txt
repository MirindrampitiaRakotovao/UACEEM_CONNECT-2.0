import React, { useState, useEffect } from "react";
import { Heart, MessageCircle, Eye } from "lucide-react";
import Avatar from "./avatar";
import ModalFile from "./ModalFile";
import CommentModal from "./CommentModal"; // Importer le CommentModal
import axios from "axios"; // Ajouter axios pour la gestion des requêtes API

type File = {
  id: number;
  url_fichier: string;
};

type Etudiant = {
  id: number;
  username: string;
  role: string;
};

type Publication = {
  id: number;
  legende: string;
  date_publication: string;
  etudiant: Etudiant;
  fichiers: File[];
};

interface PublicationListProps {
  publications: Publication[];
  loading: boolean;
  error: string | null;
}

const PublicationList: React.FC<PublicationListProps> = ({
  publications,
  loading,
  error,
}) => {
  const [likedPublications, setLikedPublications] = useState<number[]>([]);
  const [isCommentModalOpen, setIsCommentModalOpen] = useState<{
    [key: number]: boolean;
  }>({});
  const [newComment, setNewComment] = useState<{ [key: number]: string }>({});
  const [showCommentInput, setShowCommentInput] = useState<{
    [key: number]: boolean;
  }>({});
  const [isFileModalOpen, setIsFileModalOpen] = useState(false);
  const [selectedFileUrl, setSelectedFileUrl] = useState<string | null>(null);

  const openFileModal = (fileUrl: string) => {
    setSelectedFileUrl(fileUrl);
    setIsFileModalOpen(true);
  };

  const closeFileModal = () => {
    setIsFileModalOpen(false);
    setSelectedFileUrl(null);
  };

  // Fonction pour gérer le like/délike
  const handleLikeToggle = async (publicationId: number) => {
    try {
      const isLiked = likedPublications.includes(publicationId);
      const token = localStorage.getItem("token");
      await axios.post(
        "http://localhost:4000/reaction",
        { publicationId },
        { headers: { Authorization: `Bearer ${token}` } }
      );

      setLikedPublications((prevLikedPublications) =>
        isLiked
          ? prevLikedPublications.filter((id) => id !== publicationId)
          : [...prevLikedPublications, publicationId]
      );
    } catch (error) {
      console.error("Erreur lors de la gestion de la réaction:", error);
    }
  };

  // Gérer l'affichage de l'input de commentaire
  const handleShowCommentInput = (publicationId: number) => {
    setShowCommentInput((prev) => ({
      ...prev,
      [publicationId]: !prev[publicationId],
    }));
  };

  // Envoyer un nouveau commentaire
  const handleEnvoyerCommentaire = async (publicationId: number) => {
    const token = localStorage.getItem("token");
    const etudiantId = localStorage.getItem("etudiantId");

    if (!etudiantId) {
      console.error("Erreur: identifiant de l'étudiant non disponible");
      return;
    }

    if (newComment[publicationId]) {
      try {
        await axios.post(
          "http://localhost:4000/commentaire",
          { contenu: newComment[publicationId], publicationId, etudiantId },
          { headers: { Authorization: `Bearer ${token}` } }
        );
        setNewComment((prev) => ({
          ...prev,
          [publicationId]: "",
        }));
        // Après l'envoi du commentaire, on pourrait recharger les commentaires si nécessaire.
      } catch (error: any) {
        console.error("Erreur lors de l'envoi du commentaire:", error.response?.data || error.message);
      }
    }
  };

  // Ouvrir le modal de commentaires
  const handleOpenCommentModal = (publicationId: number) => {
    setIsCommentModalOpen((prev) => ({
      ...prev,
      [publicationId]: true,
    }));
  };

  // Fermer le modal de commentaires
  const handleCloseCommentModal = (publicationId: number) => {
    setIsCommentModalOpen((prev) => ({
      ...prev,
      [publicationId]: false,
    }));
  };

  const sortedPublications = publications.sort(
    (a, b) =>
      new Date(b.date_publication).getTime() - new Date(a.date_publication).getTime()
  );

  return (
    <div className="publication-list mt-8">
      {loading ? (
        <p>Chargement des publications...</p>
      ) : error ? (
        <p>{error}</p>
      ) : (
        sortedPublications.map((publication) => {
          const isLiked = likedPublications.includes(publication.id); // Vérifier si l'utilisateur a déjà aimé

          return (
            <div key={publication.id} className="bg-white p-4 rounded-md shadow mb-4 p-3">
              <div className="flex justify-between items-center mb-4">
                <div className="flex">
                  <Avatar userId={publication.etudiant.id} />
                  <div className="ml-4">
                    <h4 className="text-lg font-bold">
                      {publication.etudiant.username}
                    </h4>
                    <p className="text-sm text-gray-400">
                      {publication.etudiant.role}
                    </p>
                    <span className="text-sm text-gray-400">
                      {new Date(publication.date_publication).toLocaleDateString()}
                    </span>
                  </div>
                </div>
              </div>

              <p className="mt-2 mb-4">{publication.legende}</p>

              <div className="flex justify-between mt-6">
                <button
                  className="flex items-center space-x-2"
                  onClick={() => handleLikeToggle(publication.id)}
                >
                  <Heart
                    className={`w-6 h-6 cursor-pointer transition duration-200 ease-in-out ${
                      isLiked ? "text-red-500 fill-red-500" : "text-gray-500"
                    } hover:text-red-500 hover:fill-red-500`}
                  />
                  <span
                    className={`text-sm transition duration-200 ease-in-out ${
                      isLiked ? "text-red-500" : "text-gray-500"
                    } hover:text-red-500`}
                  >
                    J'adore
                  </span>
                </button>

                <button
                  className="flex items-center space-x-2"
                  onClick={() => handleShowCommentInput(publication.id)}
                >
                  <MessageCircle className="w-6 h-6 text-gray-500" />
                  <span className="text-sm text-gray-500">Commenter</span>
                </button>

                
              </div>

              {/* Afficher l'input pour le commentaire */}
              {showCommentInput[publication.id] && (
                <div className="mt-4 flex items-center">
                  <input
                    type="text"
                    value={newComment[publication.id] || ""}
                    onChange={(e) =>
                      setNewComment((prev) => ({
                        ...prev,
                        [publication.id]: e.target.value,
                      }))
                    }
                    placeholder="Ajouter un commentaire..."
                    className="border border-gray-300 rounded-md p-2 flex-grow mr-2"
                  />
                  <button
                    onClick={() => handleEnvoyerCommentaire(publication.id)}
                    className="p-2 bg-blue-500 text-white rounded-md"
                  >
                    Envoyer
                  </button>
                </div>
              )}

              {/* Afficher le modal de commentaires */}
              {isCommentModalOpen[publication.id] && (
                <CommentModal
                  publicationId={publication.id}
                  isOpen={isCommentModalOpen[publication.id]}
                  onClose={() => handleCloseCommentModal(publication.id)}
                />
              )}

              {publication.fichiers.length > 0 && (
                <div className="mt-4">
                  {publication.fichiers.map((file) => (
                    <div key={file.id} className="mb-2">
                      <img
                        src={file.url_fichier}
                        alt="Publication"
                        className="w-full h-auto cursor-pointer"
                        onClick={() => openFileModal(file.url_fichier)}
                      />
                    </div>
                  ))}
                </div>
              )}

              <ModalFile
                isOpen={isFileModalOpen}
                onClose={closeFileModal}
                fileUrl={selectedFileUrl}
              />
            </div>
          );
        })
      )}
    </div>
  );
};

export default PublicationList;
