import React, { useState, useEffect } from "react";
import { Heart, MessageCircle, BadgeAlert, CircleX, SendHorizontal } from 'lucide-react';
import Avatar from './avatar';
import ModalFile from './ModalFile';
import { fetchUserReactions, fetchCommentaires, handleLikeToggle, sendComment } from '../services/publicationService';

interface Publication {
  id: number;
  contenu: string;
  date_publication: string;
  nb_reactions: number;
  etudiant: {
    id: number;
    nom: string;
    photo_profil: string;
  };
}

interface PublicationListProps {
  publications: Publication[];
  loading: boolean;
  error: boolean;
}

const PublicationList: React.FC<PublicationListProps> = ({ publications, loading, error }) => {
  const [likedPublications, setLikedPublications] = useState<number[]>([]);
  const [commentairesVisibles, setCommentairesVisibles] = useState<{ [key: number]: boolean }>({});
  const [commentaires, setCommentaires] = useState<{ [key: number]: any[] }>({});
  const [newComment, setNewComment] = useState<{ [key: number]: string }>({});

  useEffect(() => {
    const loadReactions = async () => {
      try {
        const userLikedPublications = await fetchUserReactions();
        setLikedPublications(userLikedPublications);
      } catch (error) {
        console.error('Erreur lors du chargement des réactions:', error);
      }
    };

    loadReactions();
  }, []);

  const handleVoirCommentaires = async (publicationId: number) => {
    setCommentairesVisibles((prev) => ({
      ...prev,
      [publicationId]: !prev[publicationId],
    }));

    if (!commentaires[publicationId]) {
      try {
        const data = await fetchCommentaires(publicationId);
        setCommentaires((prev) => ({ ...prev, [publicationId]: data }));
      } catch (error) {
        console.error('Erreur lors du chargement des commentaires:', error);
      }
    }
  };

  const handleEnvoyerCommentaire = async (publicationId: number) => {
    if (newComment[publicationId]) {
      try {
        await sendComment(publicationId, newComment[publicationId]);
        setNewComment((prev) => ({ ...prev, [publicationId]: "" }));
        handleVoirCommentaires(publicationId);
      } catch (error) {
        console.error('Erreur lors de l\'envoi du commentaire:', error);
      }
    }
  };

  const handleLike = async (publicationId: number) => {
    try {
      const updatedLikes = await handleLikeToggle(publicationId, likedPublications);
      setLikedPublications(updatedLikes);
    } catch (error) {
      console.error('Erreur lors de la gestion de la réaction:', error);
    }
  };

  if (loading) return <p>Chargement...</p>;
  if (error) return <p>Erreur lors du chargement des publications</p>;

  return (
    <div className="publication-list">
      {publications.map((publication) => (
        <div key={publication.id} className="publication">
          <div className="publication-header">
            <Avatar imageUrl={publication.etudiant.photo_profil} alt={publication.etudiant.nom} />
            <div>
              <h3>{publication.etudiant.nom}</h3>
              <p>{new Date(publication.date_publication).toLocaleString()}</p>
            </div>
          </div>
          <div className="publication-content">
            <p>{publication.contenu}</p>
            <ModalFile publicationId={publication.id} />
          </div>
          <div className="publication-actions">
            <button onClick={() => handleLike(publication.id)}>
              <Heart
                color={likedPublications.includes(publication.id) ? 'red' : 'black'}
              />
              {publication.nb_reactions}
            </button>
            <button onClick={() => handleVoirCommentaires(publication.id)}>
              <MessageCircle />
            </button>
          </div>
          {commentairesVisibles[publication.id] && (
            <div className="publication-commentaires">
              {commentaires[publication.id]?.map((commentaire) => (
                <div key={commentaire.id} className="commentaire">
                  <p>{commentaire.contenu}</p>
                </div>
              ))}
              <div className="commentaire-input">
                <input
                  type="text"
                  value={newComment[publication.id] || ""}
                  onChange={(e) =>
                    setNewComment((prev) => ({ ...prev, [publication.id]: e.target.value }))
                  }
                  placeholder="Ajouter un commentaire..."
                />
                <button onClick={() => handleEnvoyerCommentaire(publication.id)}>
                  <SendHorizontal />
                </button>
              </div>
            </div>
          )}
        </div>
      ))}
    </div>
  );
};

export default PublicationList;
